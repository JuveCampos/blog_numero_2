{
  "hash": "f7d4b13461e514cc039733818c7fc0f1",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Pivoteando bases: breve tutorial de pivot_longer y pivot_wider\"\nauthor: \"Juvenal Campos\"\ndate: \"2020-12-04\"\ncategories: [Tutoriales, R]\ntags: [tidyr, pivot, manipulación de datos, R]\n---\n\nLas tablas consisten en una disposición de datos en un arreglo matricial de filas y columnas. Estas tablas pueden mostrar su información de distintas maneras, dependiendo de la información que se quiere mostrar, las unidades de análisis u observación que la componen, la temporalidad de la información que incluyen, el numero de variables que incorporan, etc. \n\nEn el uso de **R**, las arreglos tabulares son ina de las piezas centrales del análisis y manejo de información: es el arreglo de información que conforma a las `tibbles` y a los `data.frames`, a partir de los cuales realizamos nuestros análisis, corremos nuestros modelos o hacemos gráficas y visualizaciones. \n\nDada su importancia en este lenguaje de programación, en el presente texto, vamos a repasar dos de las formas principales en las cuales podemos organizar nuestra información dentro de tablas (formato _largo_ y formato _ancho_), las ventajas que tienen cada una de esas formas, y finalmente, veremos un ejemplo rápido de la aplicación de las funciones que nos permiten pasar de un tipo de formato al otro. \n\n# Formatos ancho y largo. \n\nDos de los formatos en los que puede presentarse la información dentro de una tabla son el **formato largo** y el **formato ancho**. \n\nAmbos formatos son ampliamente utilizados para presentar información y datos abiertos a lo largo del mundo, y, si bien presentan una estructura distinta, ambos son equivalentes y pueden mostrar la misma información. \n\n# Formato Ancho\n\nEn el formato ancho, los datos para las unidades de observación se presentan a lo largo de columnas diferentes. Esto se muestra en la tabla a continuación: \n\n# Tabla formato ancho. \n\n\n::: {.cell}\n::: {.cell-output-display}\n\n\n|Persona | Edad| Peso| Altura|\n|:-------|----:|----:|------:|\n|Roberto |   32|  168|    180|\n|Alicia  |   24|  150|    175|\n|Esteban |   64|  144|    165|\n|Juvenal |   29|  200|    185|\n\n\n:::\n:::\n\n\nEstas tablas tienen la ventaja de que son muy agradables para la lectura humana.  \n\nEn este tipo de tablas, incluir nuevos indivíduos hace que la tabla crezca hacia abajo, y incluir nuevas mediciones (fecha de cumpleaños, Índice de masa corporal o Años de educación) hace que la tabla crezca hacia los lados. \n\n# Tabla formato largo.\n\nEn el _formato largo_, los datos se presentan a través de dos columnas: una columna (**columna de nombres**) que nos dice las variables o datos que se estan registrando, mientras que otra columna (**columna de valores**) registra las magnitudes o valores de dichas variables. \n\nEn estas tablas, la unidad de observación es una valor de una medida por persona, en constraste con la anterior, en la cual la unidad de observación es la persona.\n\n\n::: {.cell}\n::: {.cell-output-display}\n\n\n|Persona |Variable | Valor|\n|:-------|:--------|-----:|\n|Roberto |Edad     |    32|\n|Roberto |Peso     |   168|\n|Roberto |Altura   |   180|\n|Alicia  |Edad     |    24|\n|Alicia  |Peso     |   150|\n|Alicia  |Altura   |   175|\n|Esteban |Edad     |    64|\n|Esteban |Peso     |   144|\n|Esteban |Altura   |   165|\n|Juvenal |Edad     |    29|\n|Juvenal |Peso     |   200|\n|Juvenal |Altura   |   185|\n\n\n:::\n:::\n\n\nEste tipo de tablas son muy agradables para las máquinas y son muy fáciles de filtrar y graficar en librerías como `ggplot2`. Se usan principalmente en conjunto con otras funciones del `tidyverse` para brindar un formato `tidy` a nuestras tablas y datos.\n\nLos inconvenientes que presentan las tablas en formato _\"largo\"_ es que dificultan el análisis visual por parte de los lectores de este tipo de tablas y ocupan mayor cantidad de memoria al repetirse valores de identificación de cada una de las observaciones.\n\nA pesar de estas diferencias, hay que tener en cuenta que ambas tablas muestran la misma información, solo que la ordenan de manera diferente. \n\n# Funciones `tidyr::pivot_longer()` y `tidyr::pivot_wider()`. \n\nLas funciones `tidyr::pivot_longer()` y `tidyr::pivot_wider()` son las funciones que nos brinda el `tidyvderse` para poder pasar de una tabla de formato ancho a una tabla de formato largo y viceversa. \n\nPodemos decir que son `funciones inversas` dentro de R. El resultado de una generalmente puede revertirse usando la función contraria. \n\nLa función de `pivot_longer()` es alargar los datos, incrementando el numero de renglones y disminuyendo el numero de columnas, mientras que la función `pivot_wider()` tiene como principal función _ensanchar_ los datos, incrementando el número de columnas y disminuyendo el número de renglones. \n\n\n\nLa documentación oficial de esta función se puede visitar en este [enlace](https://tidyr.tidyverse.org/reference/pivot_longer.html)\n\n\n## Argumentos\n\nLa función `tidyr::pivot_longer()` requiere de los siguientes argumentos para funcionar: \n\n  * El argumento `data`; el objeto `tibble` o `dataframe` que vamos a _alargar_. \n\n  * El argumento `cols`, que nos pide un vector de las columnas que vamos a alargar. \n\n# Otros argumentos son: \n\n  * El argumento `names_to`, el cual va a ser el nombre de la columna de nombres. En esta se van a almacenar los nombres de las columnas marcadas en el argumento `cols`. \n\n  * El argumento `values_to`, el cual va a ser la columna que va a almacenar los valores de cada una de las columnas que almacenamos en los nombres. \n\nUn ejemplo de uso, con los datos mostrados arriba, puede verse en la siguiente imagen: \n\n![](p_longer.png)\n\nPor su parte, la función `tidyr::pivot_wider()` requiere de los siguientes argumentos para funcionar: \n\n  * El argumento `id_cols`, el cual va a recibir un vector con las columnas que van a identificar a cada unidad de observación en la tabla de formato ancho. \n\n  * El argumento `names_from`, en el cual le pasamos la columna de los nombres que van a conformar las nuevas columnas en la nueva tabla de formato ancho.\n\n  * El argumento `values_from`, en el cual le pasamos la columna de los valores que van a ir en las columnas que declaramos en el argumento `names_from`.\n\nUn ejemplo de la aplicación de `pivot_wider()` con las tablas de arriba, puede verse en la siguiente imagen: \n\n![](p_wider.png)\n\nPara practicar, haremos un ejemplo de **aplicación de estas funciones en una base de datos reales**: La base de datos de casos activos por colonia de la CDMX. \n\n# Ejemplo práctico con datos de COVID.\n\nPuedes descargar los datos desde este enlace: \n\nhttps://archivo.datos.cdmx.gob.mx/sinave-colonias/\n\n**Librerías a utilizar.**\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Pivotear \nlibrary(tidyverse) # Manipular bases de datos\n```\n:::\n\n\n\n::: {.cell}\n\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbd <- read_csv(\"https://archivo.datos.cdmx.gob.mx/sinave-colonias/historico_sinave_sep-nov.csv\") %>% \n  select(-X1) # Columna que tiene el numero del renglón\n```\n:::\n\n\nEsta tabla esta en formato ancho. En este caso, las unidades de observación (lo que significa cada renglón) son las colonias de la CDMX, mientras que las columnas son el numero de casos activos para cada uno de los días indicados en el nombre de la columna. \n\nEste formato es el formato más agradable para poder realizar mapas: si tuvieramos un archivo `*.shp` o `*.geojson` podemos \"pegarle\" una columna extra con las geometrías de cada colonia (esto lo pueden hacer con las funciones `*_join()` que revisamos en este [tutorial](https://rpubs.com/Juve_Campos/juntando_tablas) con los datos geográficos de este [enlace](https://datos.cdmx.gob.mx/explore/dataset/coloniascdmx/export/) y la librería `sf`). \n\nSupongamos que queremos hacer alguna visualización que nos demande una tabla en formato largo. Para transformar la base usaremos la función `pivot_longer()`. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nbd_larga <- bd %>% \n  pivot_longer(cols = contains(\"total_\"),\n               names_to = \"Fechas\",\n               values_to = \"casosActivos\") \n```\n:::\n\n\n\n::: {.cell}\n\n:::\n\n\nConvertimos la variable de Fechas a fechas de verdad. Para esto, elimino la partícula de texto `total_` y luego me quedo con las ultimas 2 letras para marcar el día, las letras 3 y 4 para marcar el mes y las letras 1 y 2 para marcar el año. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nbd_larga <- bd_larga %>% \n  mutate(Fechas = str_remove(Fechas, pattern = \"total_\")) %>% \n  mutate(Fechas = paste(str_sub(Fechas, start = 5, end = 6),\n                        str_sub(Fechas, start = 3, end = 4),\n                        paste0(\"20\", \n                               str_sub(Fechas, \n                                       start = 1, \n                                       end = 2)),\n                        sep = \"-\") %>% \n           as.Date(\"%d-%m-%Y\"))\n```\n:::\n\n\nYa con este formato podemos hacer gráficas como las gráficas de serie de tiempo, o graficas de barras con facetas, etc. Por ejemplo, para la colonia Roma Sur, podríamos hacer lo siguiente: \n\n\n::: {.cell}\n\n```{.r .cell-code}\nbd_larga %>% \n  filter(colonia == \"ROMA SUR I\") %>% \n  ggplot(aes(x = Fechas, \n             y = casosActivos)) + \n  geom_point() + \n  geom_line() + \n  labs(title = \"Casos Activos Colonia Roma Sur I\", \n       subtitle = \"Alcaldía Cuauhtemoc, CDMX\", \n       y = \"Casos Activos\") + \n  scale_x_date(date_breaks = \"1 week\")\n```\n:::\n\n\n\nAhora, para volver al formato largo, podemos hacer lo siguiente: \n\n\n::: {.cell}\n\n```{.r .cell-code}\nbd_ancha <- bd_larga %>% \n  pivot_wider(id_cols = c(alcaldia,\n                          colonia,\n                          clave_colonia), \n              names_from = Fechas, \n              values_from = casosActivos, \n              names_prefix = \"valores-\")\n```\n:::\n\n\n\n::: {.cell}\n\n:::\n\n\nY de esta manera, la función se encarga de generar las nuevas columnas, de acomodar los datos uno a uno y poner vacíos en caso de que no haya datos para el renglón de la base larga correspondiente. \n\n# Conclusiones\n\nLas funciones vistas anteriormente deben formar parte de la caja de herramientas de toda persona que desée trabajar con tablas en R, ya que, tanto para la elaboración de gráficos como para la elaboración de reportes, es necesario hacer cambios de formato para facilitarnos la vida. \n\n\n\nEsta explicación y este ejemplo fueron bastante breves y someros, y su objetivo es proveer una breve (pero completa) introducción a los formatos de tabla y a las funciones de pivoteo; sin embargo, es necesario buscar más información y material, y practicar más el uso de estas funciones para poder sacarles todo el jugo y potencial que ofrecen.\n\n![](sandwich.png)",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}