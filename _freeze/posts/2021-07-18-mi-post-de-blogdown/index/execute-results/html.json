{
  "hash": "f893ac81dc082c4ba2855b3b2f229a9e",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Mi post de blogdown\"\nauthor: \"Juvenal Campos\"  \ndate: \"2021-07-18\"\ncategories: []\ntags: []\n---\n\n<style>\n\n  p.footnote{\n  color:#5e5e5e;\n  font-size:90%;\n  text-align:center;\n  }\n  \n  img {\n    width: 40%;\n    height: auto;\n}\n    \n</style>\n\n\n\n<p style = 'color: gray;'>Contenido de la presentación brindada en el LNPP-Tech 2020.</p> \n\n## Importancia de tener un sitio personal\n\nEs importante tener un sitio personal para: \n\n* Presentarnos efectivamente: nuestros intereses, nuestros proyectos, nuestras ideas y nuestra historia.\n\n* Incrementar nuestra visibilidad en línea.\n\n* Presentar los servicios y productos que ofrecemos. \n\n* Practicar nuestras habilidades de comunicación. \n\n* Es el CV moderno. Nos permite destacar y diferenciarnos de la competencia (que no tiene su propia página). \n\n\n## ¿Qué es RMarkdown? \n\nRMarkdown es la combinación del lenguaje de marcado `Markdown` combinado con las capacidades del lenguaje de programación `R` para analizar y visualizar datos. \n\n<!-- meter enlaces de los archivos -->\nAl combinar ambos lenguajes tenemos la capacidad de crear una gran cantidad de documentos, que van desde una página web básica en HTML hasta documentos `*.pdf`, documentos de Word, presentaciones de diapositivas, libros electrónicos y, por supuesto, blogs personales.\n\n## Blogdown\n\nEl paquete Blogdown es el paquete de R creado para generar sitios web estáticos personalizables en Markdown. Entre las ventajas que ofrece estan las siguientes: \n\n1) Podemos incluir y ejecutar código de R (o de cualquier otro lenguaje de programación soportado por el paquete `knit`).\n\n2) Automáticamente nos genera (renderiza) resultados como gráficas, tablas, resultados de análisis estadísticos y widgets de HTML. \n\n3) Nos permite incluir citaciones, pies de página y ecuaciones `LATEX`.\n\nEste paquete se encuentra disponible en el CRAN. Se puede instalar con el siguiente código: \n\n\n::: {.cell}\n\n```{.r .cell-code}\ninstall.packages(\"blogdown\")\n```\n:::\n\n\n\n## ¿Por qué usar `blogdown`? \n\nLas ventajas de `blogdown` con respecto a otros servicios (como `wordpress` o publicar en `medium`) consisten prácticamente en dos cosas: \n\n1) **Facilita la inclusión de código de R.** \n\n2) **Es gratuito**\n\n3) **Te permite empezar a trabajar desde ya en tu sitio web**\n\n## Framework Hugo\n\nPor default, el paquete `blogdown` usa `Hugo`, un generador de sitios estáticos `open-source`, el cual provee una manera rápida y flexible de generar el contenido de tu sitio y de compartirlo en línea. \n\nSegún su repositorio en línea, `Hugo` está optimizado para ser rápido, fácil de usar y ser altamente configurable. `Hugo` toma un directorio con contenido compatible y lo convierte en código HTML listo para ser publicado en la web. \n\nCuando se utiliza en `blogdown`, instalamos `Hugo` desde RStudio (por lo que no debemos preocuparnos tanto por entenderlo en un principio).\n\nPara revisar los temas disponibles para generar nuestros blogs, podemos consultar el enlace de temas disponibles para `Hugo`: https://themes.gohugo.io y ver cual nos agrada más. \n\nEl código fuente de `Hugo` se puede consultar en este repositorio: https://github.com/gohugoio/hugo \n\n## Proceso de trabajo \n\n### Para crear el blog por primera vez: \n\n1. Nos vamos a `File > New Project > ` en la barra de herramientas de RStudio. \n\n![](images/img_1.png)\n\n2. Seleccionamos `New Directory >` para crear una carpeta con todos los archivos que se van a requerir. Una vez aquí seleccionamos la opción de `Website using blogdown` para generar un directorio adaptado a este fin. \n\n![](images/img_2.png)\n\n3. Una vez que vamos a crear el nuevo directorio, le damos un nombre y seleccionamos la opción de descargar `Hugo`, el tema que se va a ocupar (ver temas en https://themes.gohugo.io) y demás opciones por default. \n\nTerminamos por presionar `Create Project`.\n\n![](images/img_4.png)\n\n4. Una vez que configuramos el proyecto y el paquete `blogdown` ya creo los archivos base, la sesión se tiene que ver como en la siguiente imagen: \n\n![](images/img_5.png)\n\n5. Para correr el sitio, nos vamos a la sección de `Addins`, le damos en `Serve Site` y en la ventana del visualizador se debería ver la página generada. \n \n![](images/img_6.png)\n\n\n6. La página generada se puede ver como en la imagen a continuación. Se utiliza el tema seleccionado y se ponen, por default, tres _posts_ que podemos eliminar en la carpeta de contenido. \n\n![](images/img_7.png)\n\nLa página se puede modificar, modificando los archivos de la carpeta de `layouts` dentro de los archivos que ya nos instaló el paquete `blogdown`. Esto para darle una identidad propia, si se requiere. \n\n\n### Para publicar una nueva entrada: \n\nPara publicar una entrada, seguimos el siguiente procedimiento: \n\n1. Nos vamos a la sección de `Addins` y seleccionamos `New Post`. Una vez que lo hacemos, nos sale la siguiente ventana: \n\n![](images/img_9.png)\n\n2. Ya en esta ventana, rellenamos cada campo de metadatos con los datos que consideremos pertinentes. \n\n![](images/img_10.png)\n\nY, a partir de acá, prosigue escribir el artículo con nuestros conocimientos de R y RMarkdown.\n\n## ¿Donde Publicar mi blog? \n\nLos dos servicios más comunes para publicar páginas web de manera gratuita son `Github Pages` y `Netlify`. Podemos usar una de las dos, o ambas. \n\nEn ambos casos, podemos almacenar el código y los archivos en un `repositorio de Github` para que el servicio genere la página (y para ahorrarnos también el costo de un servidor). Esto aplica solo para el caso de páginas web estáticas. \n\n`Github Pages` es un servicio de `Github` que permite construir una página web a partir de un repositorio de código. Para esto, tenemos que generar un repositorio y después cargar, en dicho repositorio, todo el código necesario para generar la página y configurar el repositorio para que muestre este contenido. \n\nPor su parte, `Netlify` es una compañía que ofrece servicios de computación en la nube para el almacenamiento de aplicaciones web y sitios estáticos (como un blog). Uno de sus servicios consiste en proveer almacenamiento (host) a páginas web almacenadas a través de un control de versiones `Git`, por lo que, al igual que el servicio anterior, nos permite almacenar páginas donde el código está almacenado en repositorios de `Github.` \n\nLa ventaja de `Netlify` sobre `Github Pages` radica en que `Netlify` corre `Hugo` desde sus servidores, por lo que la carga de la página se hace de manera más rápida. Otra ventaja es que `Netlify` nos puede ayudar a gestionar la compra de dominios (direcciones web), por lo que si queremos que nuestra página tenga su dominio personalizado, lo podemos obtener/comprar de forma sencilla desde este servicio. \n\n## Algunos ejemplos: \n\nAlgunos ejemplos:\n\n* [Yihui Xie](https://yihui.org)\n\n* [RStudio blog](https://blog.rstudio.com)\n\n* [RViews blog](https://rviews.rstudio.com)\n\n* [simplystatistics.](https://simplystatistics.org)\n\n* [Rob Hyndman.](https://robjhyndman.com)\n\n* [Karl Broman.](http://kbroman.org/)\n\n* [Juvenal Campos](https://juvenalcampos.com)\n\n## Referencias: \n\n* Librería de Github: https://github.com/rstudio/blogdown \n\n* Temas de Hugo: https://themes.gohugo.io \n\n* Libro de blogdown: https://bookdown.org/yihui/blogdown/ \n\n* Preguntas en stackoverflow: https://stackoverflow.com/questions/tagged/blogdown \n\n* Artículo en español: https://rubenfcasal.github.io/post/creación-de-sitios-web-con-blogdown/ \n\n* Blogdown en 2021: https://alison.rbind.io/blog/2020-12-new-year-new-blogdown/ \n\n* Página personal: https://pamepairo.netlify.app/post/7-12-2020-motivos-pagina-web/ \n\n* Webs con Rmarkdown: https://paocorrales.github.io/post/webs-con-rmarkdown/ \n\n* Wikipedia de Netlify: https://es.wikipedia.org/wiki/Hugo_(software)\n\n* Curso `The personal website playbook` de Tom Hirst. Clase 01. https://www.tomhirst.com/products/personal-website-playbook/ \n\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}